{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatWIthHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onChange","e","currentTarget","value","onBlur","updateStatus","ProfileDataReduxForm","reduxForm","form","profile","handleSubmit","error","onSubmit","className","style","formSummaryError","createField","Input","type","Textarea","Object","keys","contacts","map","key","s","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","src","photos","large","userPhoto","mainPhoto","alt","target","files","length","initialValues","formData","then","Post","item","message","likesCount","maxLength10","maxLengthCreator","AddNewPostReduxForm","Field","name","component","validate","required","placeholder","MyPosts","React","memo","postsElement","posts","p","id","postsBlock","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","toString","refreshProfile","prevProps","prevState","Component","compose","withRouter","auth","isAuth"],"mappings":"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","file":"static/js/3.5ecf1185.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainImage\":\"ProfileInfo_mainImage__3bobJ\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__112Xl\",\"mainPhoto\":\"ProfileInfo_mainPhoto__GYuPY\",\"contact\":\"ProfileInfo_contact__1kVle\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__14GBs\",\"posts\":\"MyPosts_posts__15pTV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3x90L\"};","import React, {ChangeEvent, useEffect, useState} from 'react'\r\n\r\ntype ProfileStatType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nconst ProfileStatWithHooks = (props: ProfileStatType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <b>Status</b>: <span onDoubleClick={activateEditMode}>{props.status || \"----\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input\r\n                    autoFocus={true}\r\n                    onChange={onStatusChange}\r\n                    value={status}\r\n                    onBlur={deactivateEditMode}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileStatWithHooks","import React from \"react\";\r\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {ProfileType, KeyContactsType} from \"../../../redux/profile-reducer\";\r\nimport s from './ProfileInfo.module.css'\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\r\n\r\n\r\ntype ProfileDataType = {\r\n    profile: ProfileType\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<{ error: any, handleSubmit: any, profile: ProfileType }> & ProfileDataType> = ({profile, handleSubmit, error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div>\r\n            <button>save</button>\r\n        </div>\r\n        {error && <div className={style.formSummaryError}>{error}</div>}\r\n        <div>\r\n            <b>Full Name</b>: {createField('Full name', 'fullName', [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>:\r\n            {createField('', 'lookingForAJob', [], Input, {type: 'checkbox'})}\r\n        </div>\r\n\r\n        <div>\r\n            <b>My profession skills</b>:\r\n            {createField('My profession skills', 'lookingForAJobDescription', [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>About me</b>:\r\n            {createField('About me', 'aboutMe', [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {(Object.keys(profile.contacts) as KeyContactsType).map((key) => {\r\n            return <div key={key} className={s.contact}>\r\n                <b>{key} : {createField(key, 'contacts.' + key, [], Input)}</b>\r\n            </div>\r\n        })}\r\n        </div>\r\n    </form>\r\n}\r\nconst ProfileDataReduxForm = reduxForm<any, any>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataReduxForm;","import React, {useState} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {Preloader} from \"../../common/preloader/Preloader\";\r\nimport {KeyContactsType, ProfileType} from \"../../../redux/profile-reducer\";\r\nimport ProfileStatWithHooks from './ProfileStatWIthHooks';\r\nimport userPhoto from '../../../assets/images/user.png'\r\nimport {NullableType} from \"../../../utils/typeAssist\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\n\r\ntype PropsType = {\r\n    profile: NullableType<ProfileType>\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: Blob) => void\r\n    saveProfile?: any //ANY!!!!!!\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}: PropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: React.ChangeEvent<HTMLInputElement>) => { // ANY!!!!!!!!!!\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const onSubmit = (formData: any) => {\r\n        saveProfile(formData).then(() => setEditMode(false))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto} alt=\"\"/>\r\n                {isOwner && <input type=\"file\" onChange={onMainPhotoSelected}/>}\r\n                {editMode\r\n                    ? <ProfileDataForm\r\n                        initialValues={profile}\r\n                        profile={profile}\r\n                        onSubmit={onSubmit}\r\n                    />\r\n                    : <ProfileData profile={profile}\r\n                                   isOwner={isOwner}\r\n                                   goToEditMode={() => setEditMode(true)}\r\n                    />\r\n                }\r\n\r\n                <ProfileStatWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ntype ProfileDataType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataType> = ({profile, isOwner, goToEditMode}) => {\r\n    return <div>\r\n        {isOwner && <div>\r\n            <button onClick={goToEditMode}>edit</button>\r\n        </div>}\r\n        <div><b>Name</b>: {profile.fullName}</div>\r\n        <div>\r\n            <b>Looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n        <div>\r\n            <b>My profession skills</b>: {profile.lookingForAJobDescription}\r\n        </div>}\r\n        <div>\r\n            <b>About me</b>: {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {(Object.keys(profile.contacts) as KeyContactsType).map((key) => {\r\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n        })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nconst Contact = ({contactTitle, contactValue}: { contactTitle: string, contactValue: NullableType<string> }) => {\r\n    return <div className={s.contact}>\r\n        <b>{contactTitle}</b>: {contactValue}\r\n    </div>\r\n}\r\n\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\n\r\ntype PostType = {\r\n    message: string,\r\n    likesCount: string\r\n}\r\n\r\nconst Post = (props: PostType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://cdn.iconscout.com/icon/free/png-256/avatar-370-456322.png\" alt=\"ava\"/>\r\n            {props.message}\r\n            <div><span>{props.likesCount}</span></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;\r\n\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {PostsType} from '../../../redux/profile-reducer';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\r\nimport {Textarea} from '../../common/FormsControls/FormsControls';\r\n\r\ntype MyPostsType = {\r\n    posts: Array<PostsType> // Типизация из Profile-reducer ???????\r\n    newPostText: string\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\ntype AddNewPostFormType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nlet AddNewPostForm = (props: InjectedFormProps<AddNewPostFormType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'newPostText'}\r\n                       component={Textarea}\r\n                       validate={[required, maxLength10]}\r\n                       placeholder={'Post message'}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm<AddNewPostFormType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n\r\n\r\nconst MyPosts = React.memo((props: MyPostsType) => {\r\n\r\n\r\n    let postsElement = props.posts.map(p => <Post key={p.id}\r\n                                                  message={p.message}\r\n                                                  likesCount={p.likesCount}/>)\r\n\r\n    let onAddPost = (values: { newPostText: string }) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostReduxForm onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n})\r\n\r\nexport default MyPosts;\r\n","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n\r\nlet mapStateToProps = (state: any) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: any // any!!!!!!!!!!!!\r\n    saveProfile: any\r\n}\r\n\r\nconst Profile = (props: PropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         savePhoto={props.savePhoto}\r\n                         saveProfile={props.saveProfile}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    getStatus,\r\n    getUserProfile,\r\n    ProfileType, savePhoto, saveProfile,\r\n    updateStatus\r\n} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose} from 'redux';\r\nimport {NullableType} from \"../../utils/typeAssist\";\r\nimport {WithAuthRedirect} from \"../../HOC/WithAuthRedirect\";\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype MapStatePropsType = {\r\n    profile: NullableType<ProfileType>\r\n    status: string\r\n    authorizedUserId: NullableType<number>\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number | null) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: any // ANY!!!!!!!!!!!!!!\r\n    saveProfile: any\r\n}\r\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype RootPropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\n\r\nclass ProfileContainer extends React.Component<RootPropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: number = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId || 0\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId.toString())\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<RootPropsType>, prevState: Readonly<{}>): void {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Profile\r\n                    {...this.props}\r\n                    isOwner={!this.props.match.params.userId}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}\r\n                    savePhoto={this.props.savePhoto}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default compose<any>(\r\n    withRouter,\r\n    connect(mapStateToProps, {\r\n        getUserProfile, getStatus, updateStatus,\r\n        savePhoto, saveProfile\r\n    }),\r\n)(ProfileContainer)"],"sourceRoot":""}