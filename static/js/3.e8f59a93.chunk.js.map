{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatWIthHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onChange","e","currentTarget","value","onBlur","updateStatus","ProfileInfo","profile","isOwner","savePhoto","Preloader","className","s","descriptionBlock","src","photos","large","userPhoto","mainPhoto","alt","type","target","files","length","fullName","Post","item","message","likesCount","maxLength10","maxLengthCreator","AddNewPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","validate","required","placeholder","MyPosts","React","memo","postsElement","posts","map","p","key","id","postsBlock","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","toString","refreshProfile","prevProps","prevState","Component","compose","withRouter","auth","isAuth"],"mappings":"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","file":"static/js/3.e8f59a93.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainImage\":\"ProfileInfo_mainImage__1C5Wq\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1hVfg\",\"mainPhoto\":\"ProfileInfo_mainPhoto__S3Xeg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1Bz1M\",\"posts\":\"MyPosts_posts__20llT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__f_ukf\"};","import React, {ChangeEvent, useEffect, useState} from 'react'\r\n\r\ntype ProfileStatType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nconst ProfileStatWithHooks = (props: ProfileStatType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || \"----\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input\r\n                    autoFocus={true}\r\n                    onChange={onStatusChange}\r\n                    value={status}\r\n                    onBlur={deactivateEditMode}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileStatWithHooks","import React from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {Preloader} from \"../../common/preloader/Preloader\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport ProfileStatWithHooks from './ProfileStatWIthHooks';\r\nimport userPhoto from '../../../assets/images/user.png'\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: any //ANY!!!!!!\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto}: PropsType) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: any) => { // ANY!!!!!!!!!!\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto} alt=\"\"/>\r\n                {isOwner && <input type=\"file\" onChange={onMainPhotoSelected}/>}\r\n                <div>fullName: {profile.fullName}</div>\r\n                <ProfileStatWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\n\r\ntype PostType = {\r\n    message: string,\r\n    likesCount: string\r\n}\r\n\r\nconst Post = (props: PostType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://cdn.iconscout.com/icon/free/png-256/avatar-370-456322.png\" alt=\"ava\"/>\r\n            {props.message}\r\n            <div><span>{props.likesCount}</span></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;\r\n\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {PostsType} from '../../../redux/profile-reducer';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\r\nimport {Textarea} from '../../common/FormsControls/FormsControls';\r\n\r\ntype MyPostsType = {\r\n    posts: Array<PostsType> // Типизация из Profile-reducer ???????\r\n    newPostText: string\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\ntype AddNewPostFormType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nlet AddNewPostForm = (props: InjectedFormProps<AddNewPostFormType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'newPostText'}\r\n                       component={Textarea}\r\n                       validate={[required, maxLength10]}\r\n                       placeholder={'Post message'}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm<AddNewPostFormType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n\r\n\r\nconst MyPosts = React.memo((props: MyPostsType) => {\r\n\r\n\r\n    let postsElement = props.posts.map(p => <Post key={p.id}\r\n                                                  message={p.message}\r\n                                                  likesCount={p.likesCount}/>)\r\n\r\n    let onAddPost = (values: { newPostText: string }) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostReduxForm onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n})\r\n\r\nexport default MyPosts;\r\n","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n\r\nlet mapStateToProps = (state: any) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: any // any!!!!!!!!!!!!\r\n}\r\n\r\nconst Profile = (props: PropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         savePhoto={props.savePhoto}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    getStatus,\r\n    getUserProfile,\r\n    ProfileType, savePhoto,\r\n    updateStatus\r\n} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose} from 'redux';\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number | null) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: any // ANY!!!!!!!!!!!!!!\r\n}\r\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype RootPropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\n\r\nclass ProfileContainer extends React.Component<RootPropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: number = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId || 0\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId.toString())\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<RootPropsType>, prevState: Readonly<{}>): void {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Profile\r\n                    {...this.props}\r\n                    isOwner={!this.props.match.params.userId}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}\r\n                    savePhoto={this.props.savePhoto}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default compose<any>(\r\n    // WithAuthRedirect,\r\n    withRouter,\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto}),\r\n)(ProfileContainer)"],"sourceRoot":""}