{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogsItem/DialogsItem.tsx","components/Dialogs/AddMessageForm/AddMessegeForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","Message","props","className","s","dialog","message","DialogItem","active","to","id","name","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","state","dialogsPage","dialogElement","dialogs","map","d","key","messageElement","messages","m","isAuth","dialogsItems","values","sendMessage","newMessageBody","compose","connect","dispatch","sendMessageCreator","WithAuthRedirect"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,4B,uFCahKC,EANC,SAACC,GACb,OACI,yBAAKC,UAAWC,IAAEC,QAASH,EAAMI,U,QCQ1BC,EARI,SAACL,GAChB,OACI,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEI,QAC/B,kBAAC,IAAD,CAASC,GAAI,YAAcP,EAAMQ,IAAKR,EAAMS,Q,yCCHlDC,EAAcC,YAAiB,IAoBtBC,cAA8B,CAACC,KAAM,wBAArCD,EAjBQ,SAACZ,GACpB,OACI,0BAAMc,SAAUd,EAAMe,cAClB,6BACI,kBAACC,EAAA,EAAD,CACIC,UAAWC,IACXT,KAAM,iBACNU,YAAa,qBACbC,SAAU,CAACC,IAAUX,MAG7B,6BACI,qDCuBDY,EAhCC,SAACtB,GAEb,IAAIuB,EAAQvB,EAAMwB,YAEdC,EAAgBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYC,IAAKD,EAAEpB,GACPC,KAAMmB,EAAEnB,KACRD,GAAIoB,EAAEpB,QAEzDsB,EAAiBP,EAAMQ,SAASJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAASH,IAAKG,EAAExB,GACPJ,QAAS4B,EAAE5B,aAMjE,OAAKJ,EAAMiC,OAGP,yBAAKhC,UAAWC,IAAEwB,SACd,yBAAKzB,UAAWC,IAAEgC,cACbT,GAEL,yBAAKxB,UAAWC,IAAE6B,UAEd,6BAAMD,GACN,kBAAC,EAAD,CAAgBhB,SAdR,SAACqB,GACjBnC,EAAMoC,YAAYD,EAAOE,qBAGH,kBAAC,IAAD,CAAU9B,GAAI,Y,wBCD7B+B,sBACXC,aAfkB,SAAChB,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAKF,SAACgB,GACtB,MAAO,CACHJ,YAAa,SAACC,GACVG,EAASC,YAAmBJ,SAMpCK,IAFWJ,CAGbhB","file":"static/js/4.9b2bec70.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2KFg0\",\"dialogsItems\":\"Dialogs_dialogsItems__Gml3P\",\"active\":\"Dialogs_active__12FVy\",\"dialog\":\"Dialogs_dialog__2O6Dy\",\"messages\":\"Dialogs_messages__3E8Ii\"};","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\"\r\n\r\n\r\ntype MessageType = {\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessageType) => {\r\n    return (\r\n        <div className={s.dialog}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype DialogItemType = {\r\n    name: string,\r\n    id: string\r\n}\r\n\r\nconst DialogItem = (props: DialogItemType) => {\r\n    return (\r\n        <div className={s.dialog + \" \" + s.active}>\r\n            <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\n\r\nexport type AddMessegeFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\n\r\nconst AddMessegeForm = (props: InjectedFormProps<AddMessegeFormType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    name={\"newMessageBody\"}\r\n                    placeholder={'Enter your message'}\r\n                    validate={[required, maxLength50]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send Message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport default reduxForm<AddMessegeFormType>({form: \"dialogAddMessageForm\"})(AddMessegeForm)","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./DialogsItem/DialogsItem\";\r\nimport {DialogsPageType} from \"../../redux/dialogs-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport AddMessegeForm from \"./AddMessageForm/AddMessegeForm\";\r\n\r\n\r\ntype DialogsType = {\r\n    dialogsPage: DialogsPageType\r\n    sendMessage: (newMessageBody: string) => void\r\n    updateNewMessageBody: (body: string) => void\r\n    isAuth: boolean\r\n}\r\n\r\nconst Dialogs = (props: DialogsType) => {\r\n\r\n    let state = props.dialogsPage\r\n\r\n    let dialogElement = state.dialogs.map(d => <DialogItem key={d.id}\r\n                                                           name={d.name}\r\n                                                           id={d.id}/>)\r\n\r\n    let messageElement = state.messages.map(m => <Message key={m.id}\r\n                                                          message={m.message}/>)\r\n\r\n    let addNewMessage = (values: any) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    if (!props.isAuth) return <Redirect to={\"/login\"}/>\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogElement}\r\n            </div>\r\n            <div className={s.messages}>\r\n\r\n                <div>{messageElement}</div>\r\n                <AddMessegeForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {\r\n    DialogsPageType,\r\n    sendMessageCreator,\r\n} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {WithAuthRedirect} from \"../../HOC/WithAuthRedirect\";\r\n\r\ntype MapStatePropsType = {\r\n    // isAuth: boolean;\r\n    dialogsPage: DialogsPageType\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n        // isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\nexport default compose<React.FC>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    WithAuthRedirect\r\n)(Dialogs);\r\n"],"sourceRoot":""}