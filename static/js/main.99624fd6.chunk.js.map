{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Dialogs/Dialogs.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Header/Header.module.css","components/Profile/MyPosts/Post/Post.module.css","redux/profile-reducer.tsx","redux/dialogs-reducer.tsx","redux/sidebar-reducer.tsx","redux/state.ts","components/Header/Header.tsx","components/Navbar/Navbar.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogsItem/DialogsItem.tsx","components/Dialogs/Dialogs.tsx","App.tsx","index.tsx"],"names":["module","exports","profileReducer","state","action","type","newPost","id","message","newPostText","likesCount","posts","push","newText","dialogsReducer","newMessageBody","body","messages","sidebarReducer","store","_state","profilePage","dialogsPage","dialogs","name","sidebar","_callSubscriber","getState","this","subscribe","observer","dispatch","Header","className","s","header","src","alt","Navbar","nav","item","to","activeClassName","activeLink","active","href","Post","props","MyPosts","postsElement","map","p","key","postsBlock","value","onChange","e","text","currentTarget","changeNewTextActionCreator","onClick","ProfileInfo","mainImage","descriptionBlock","Profile","Message","dialog","DialogItem","Dialogs","dialogElement","d","messageElement","m","dialogsItems","target","placeholder","App","path","render","rerenderEntireTree","ReactDOM","StrictMode","bind","document","getElementById"],"mappings":"6GACAA,EAAOC,QAAU,CAAC,IAAM,oBAAoB,KAAO,qBAAqB,WAAa,6B,gBCArFD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,4B,sBCA/KD,EAAOC,QAAU,CAAC,WAAa,4BAA4B,MAAQ,yB,gBCAnED,EAAOC,QAAU,CAAC,UAAY,+BAA+B,iBAAmB,wC,mBCAhFD,EAAOC,QAAU,CAAC,OAAS,yB,iBCA3BD,EAAOC,QAAU,CAAC,KAAO,qB,kHCCzB,IAmCeC,EAhCQ,SAACC,EAAwBC,GAE5C,OAAQA,EAAOC,MACX,IAAK,WACD,IAAIC,EAAqB,CACrBC,GAAI,EACJC,QAASL,EAAMM,YACfC,WAAY,MAIhB,OAFAP,EAAMQ,MAAMC,KAAKN,GACjBH,EAAMM,YAAc,GACbN,EACX,IAAK,kBAED,OADAA,EAAMM,YAAcL,EAAOS,QACpBV,EACX,QACI,OAAOA,ICaJW,EA5BQ,SAACX,EAAwBC,GAE5C,OAAQA,EAAOC,MACX,IAAK,0BAED,OADAF,EAAMY,eAAiBX,EAAOY,KACvBb,EACX,IAAK,eACD,IAAIa,EAAOb,EAAMY,eAGjB,OAFAZ,EAAMY,eAAiB,GACvBZ,EAAMc,SAASL,KAAK,CAACJ,QAASQ,EAAMT,GAAI,IACjCJ,EACX,QACI,OAAOA,ICXJe,EALQ,SAACf,EAAoBC,GAExC,OAAOD,GC2FIgB,EA/CQ,CACnBC,OAAQ,CACJC,YAAa,CACTV,MAAO,CACH,CAACH,QAAS,2BAA4BE,WAAY,MAClD,CAACF,QAAS,eAAgBE,WAAY,MACtC,CAACF,QAAS,uBAAwBE,WAAY,MAElDD,YAAa,IAEjBa,YAAa,CACTC,QAAS,CACL,CAACC,KAAM,SAAUjB,GAAI,KACrB,CAACiB,KAAM,SAAUjB,GAAI,KACrB,CAACiB,KAAM,OAAQjB,GAAI,KACnB,CAACiB,KAAM,QAASjB,GAAI,KACpB,CAACiB,KAAM,QAASjB,GAAI,MAExBU,SAAU,CACN,CAACT,QAAS,MAAOD,GAAI,GACrB,CAACC,QAAS,eAAgBD,GAAI,GAC9B,CAACC,QAAS,MAAOD,GAAI,GACrB,CAACC,QAAS,KAAMD,GAAI,GACpB,CAACC,QAAS,KAAMD,GAAI,IAExBQ,eAAgB,IAEpBU,QAAS,IAEbC,gBA7BmB,SA6BHvB,KAEhBwB,SA/BmB,WAgCf,OAAOC,KAAKR,QAEhBS,UAlCmB,SAkCTC,GACNF,KAAKF,gBAAkBI,GAE3BC,SArCmB,SAqCV3B,GACLwB,KAAKR,OAAOE,YAAcR,EAAec,KAAKR,OAAOE,YAAalB,GAClEwB,KAAKR,OAAOC,YAAcnB,EAAe0B,KAAKR,OAAOC,YAAajB,GAClEwB,KAAKR,OAAOK,QAAUP,EAAeU,KAAKR,OAAOK,QAASrB,GAE1DwB,KAAKF,gBAAgBE,KAAKR,U,gFC7EnBY,EARA,WACb,OACI,4BAAQC,UAAWC,IAAEC,QACjB,yBAAKC,IAAI,wGAAwGC,IAAI,a,gBCmBhHC,EAtBA,WACX,OACI,yBAAKL,UAAWC,IAAEK,KACd,yBAAKN,UAAWC,IAAEM,MACd,kBAAC,IAAD,CAASC,GAAG,WAAWC,gBAAiBR,IAAES,YAA1C,YAEJ,yBAAKV,UAAS,UAAKC,IAAEM,KAAP,YAAeN,IAAEU,SAC3B,kBAAC,IAAD,CAASH,GAAG,WAAWC,gBAAiBR,IAAES,YAA1C,YAEJ,yBAAKV,UAAWC,IAAEM,MACd,uBAAGK,KAAK,KAAR,SAEJ,yBAAKZ,UAAWC,IAAEM,MACd,uBAAGK,KAAK,KAAR,UAEJ,yBAAKZ,UAAWC,IAAEM,MACd,uBAAGK,KAAK,KAAR,e,kCCFDC,EAVF,SAACC,GACV,OACI,yBAAKd,UAAWC,IAAEM,MACd,yBAAKJ,IAAI,oEAAoEC,IAAI,QAChFU,EAAMvC,QACP,6BAAK,8BAAOuC,EAAMrC,eCmCfsC,EArCC,SAACD,GAEb,IAAIE,EAAeF,EAAMpC,MAAMuC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAMC,IAAKD,EAAE5C,GACPC,QAAS2C,EAAE3C,QACXE,WAAYyC,EAAEzC,gBAW5D,OACI,yBAAKuB,UAAWC,IAAEmB,YACd,wCACA,6BACI,6BACI,8BACIC,MAAOP,EAAMtC,YACb8C,SAZS,SAACC,GAC1B,IAAIC,EAAOD,EAAEE,cAAcJ,MAC3BP,EAAMhB,SPU4B,SAAC0B,GAAD,MACrC,CAACpD,KAhCkB,kBAgCKQ,QAAS4C,GOXfE,CAA2BF,QAalC,6BACI,4BAAQG,QApBV,WACVb,EAAMhB,SPcuD,CAAC1B,KA/BrD,eOoCG,cAGR,yBAAK4B,UAAWC,IAAEvB,OACbsC,K,iBCzBFY,EAdK,WAChB,OACI,6BACI,yBAAK5B,UAAWC,IAAE4B,WACd,yBACI1B,IAAI,+GACJC,IAAI,WAEZ,yBAAKJ,UAAWC,IAAE6B,kBAAlB,uBCWGC,EAZC,SAACjB,GACb,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASpC,MAAOoC,EAAM1B,YAAYV,MACzBF,YAAasC,EAAM1B,YAAYZ,YAC/BsB,SAAUgB,EAAMhB,a,gBCFtBkC,EANC,SAAClB,GACb,OACI,yBAAKd,UAAWC,IAAEgC,QAASnB,EAAMvC,UCQ1B2D,EARI,SAACpB,GAChB,OACI,yBAAKd,UAAWC,IAAEgC,OAAS,IAAMhC,IAAEU,QAC/B,kBAAC,IAAD,CAASH,GAAI,YAAcM,EAAMxC,IAAKwC,EAAMvB,QC6CzC4C,EA9CC,SAACrB,GAEb,IAAI5C,EAAQ4C,EAAM5B,MAAMQ,WAAWL,YAE/B+C,EAAgBlE,EAAMoB,QAAQ2B,KAAI,SAAAoB,GAAC,OAAI,kBAAC,EAAD,CAAYlB,IAAKkB,EAAE/D,GACPiB,KAAM8C,EAAE9C,KACRjB,GAAI+D,EAAE/D,QAEzDgE,EAAiBpE,EAAMc,SAASiC,KAAI,SAAAsB,GAAC,OAAI,kBAAC,EAAD,CAASpB,IAAKoB,EAAEjE,GACPC,QAASgE,EAAEhE,aAE7DO,EAAiBZ,EAAMY,eAW3B,OACI,yBAAKkB,UAAWC,IAAEX,SACd,yBAAKU,UAAWC,IAAEuC,cACbJ,GAEL,yBAAKpC,UAAWC,IAAEjB,UACd,6BAAMsD,GACN,6BACI,8BACIjB,MAAOvC,EACPwC,SAfK,SAACC,GACtB,IAAIxC,EAAOwC,EAAEkB,OAAOpB,MACpBP,EAAM5B,MAAMY,SXCf,CAAC1B,KA9B0B,0BA8BKW,KWDoBA,KAcjC2D,YAAa,kBAGrB,6BACI,4BAAQf,QAvBC,WACrBb,EAAM5B,MAAMY,SXG6C,CAAC1B,KA3B7C,mBW8CD,oBCXLuE,EAvBkB,SAAC7B,GAE9B,OACI,kBAAC,IAAD,KACI,yBAAKd,UAAW,eACZ,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAKA,UAAW,uBACZ,kBAAC,IAAD,CAAO4C,KAAK,WAAWC,OAAQ,kBAAM,kBAAC,EAAD,CACjC3D,MAAO4B,EAAM5B,WAEjB,kBAAC,IAAD,CAAO0D,KAAK,WAAWC,OAAQ,kBAC3B,kBAAC,EAAD,CACIzD,YAAa0B,EAAM5C,MAAMkB,YACzBU,SAAUgB,EAAMhB,kBCvBxCgD,EAAqB,SAAC5E,GACtB6E,IAASF,OACL,kBAAC,IAAMG,WAAP,KACI,kBAAC,EAAD,CAAK9E,MAAOA,EACP4B,SAAUZ,EAAMY,SAASmD,KAAK/D,GAC9BA,MAAOA,KAGhBgE,SAASC,eAAe,UAGhCL,EAAmB5D,EAAMQ,YAGzBR,EAAMU,UAAUkD,K","file":"static/js/main.99624fd6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2UV_k\",\"item\":\"Navbar_item__psXG3\",\"activeLink\":\"Navbar_activeLink__3Vsg1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__38gst\",\"dialogsItems\":\"Dialogs_dialogsItems__1F-1z\",\"active\":\"Dialogs_active__1JIuo\",\"dialog\":\"Dialogs_dialog__33mEz\",\"messages\":\"Dialogs_messages__7SKqO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1Bz1M\",\"posts\":\"MyPosts_posts__20llT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainImage\":\"ProfileInfo_mainImage__1C5Wq\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1hVfg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2I21n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__f_ukf\"};","import {PostsType, ActionType, ProfilePageType} from \"./state\";\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst CHANGE_NEW_TEXT = 'CHANGE-NEW-TEXT';\r\n\r\nconst profileReducer = (state: ProfilePageType, action: ActionType) => {\r\n\r\n    switch (action.type) {\r\n        case \"ADD-POST\":\r\n            let newPost: PostsType = {\r\n                id: 5,\r\n                message: state.newPostText,\r\n                likesCount: '28'\r\n            };\r\n            state.posts.push(newPost)\r\n            state.newPostText = ''\r\n            return state\r\n        case \"CHANGE-NEW-TEXT\":\r\n            state.newPostText = action.newText\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type AddPostActionCreatorType = {\r\n    type: typeof ADD_POST\r\n}\r\nexport type ChangeNewTextActionCreatorType = {\r\n    type: typeof CHANGE_NEW_TEXT\r\n    newText: string\r\n}\r\n\r\nexport const addPostActionCreator = (): AddPostActionCreatorType => ({type: ADD_POST})\r\nexport const changeNewTextActionCreator = (text: string): ChangeNewTextActionCreatorType =>\r\n    ({type: CHANGE_NEW_TEXT, newText: text})\r\n\r\nexport default profileReducer;","import {ActionType, DialogsPageType} from \"./state\";\r\n\r\nconst UPDATE_NEW_MESSAGE_BODY = 'UPDATE_NEW_MESSAGE_BODY'\r\nconst SEND_MESSAGE = 'SEND_MESSAGE'\r\n\r\n\r\nconst dialogsReducer = (state: DialogsPageType, action: ActionType) => {\r\n\r\n    switch (action.type) {\r\n        case \"UPDATE_NEW_MESSAGE_BODY\":\r\n            state.newMessageBody = action.body\r\n            return state\r\n        case \"SEND_MESSAGE\":\r\n            let body = state.newMessageBody\r\n            state.newMessageBody = ''\r\n            state.messages.push({message: body, id: 6})\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type sendMessageCreatorType = {\r\n    type: typeof SEND_MESSAGE\r\n}\r\nexport type updateNewMessageBodyCreatorType = {\r\n    type: typeof UPDATE_NEW_MESSAGE_BODY\r\n    body: string\r\n}\r\n\r\nexport const sendMessageCreator = (): sendMessageCreatorType => ({type: SEND_MESSAGE})\r\nexport const updateNewMessageBodyCreator = (text: string): updateNewMessageBodyCreatorType =>\r\n    ({type: UPDATE_NEW_MESSAGE_BODY, body: text})\r\n\r\nexport default dialogsReducer;","import {ActionType, sidebarType} from \"./state\";\r\n\r\nconst sidebarReducer = (state: sidebarType, action: ActionType) => {\r\n\r\n    return state\r\n}\r\n\r\nexport default sidebarReducer;","import profileReducer, {AddPostActionCreatorType, ChangeNewTextActionCreatorType} from \"./profile-reducer\";\r\nimport dialogsReducer, {sendMessageCreatorType, updateNewMessageBodyCreatorType} from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\n\r\nexport type ActionType = AddPostActionCreatorType |  // Типизация action\r\n    ChangeNewTextActionCreatorType | sendMessageCreatorType |\r\n    updateNewMessageBodyCreatorType\r\n\r\nexport type RootStateType = {\r\n    profilePage: ProfilePageType\r\n    dialogsPage: DialogsPageType\r\n    sidebar: sidebarType\r\n}\r\n\r\nexport type ProfilePageType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n}\r\nexport type DialogsPageType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessageType>\r\n    newMessageBody: string\r\n}\r\nexport type sidebarType = {}\r\n\r\nexport type MessageType = {\r\n    message: string,\r\n    id: number,\r\n}\r\nexport type DialogsType = {\r\n    name: string,\r\n    id: string\r\n}\r\nexport type PostsType = {\r\n    message: string,\r\n    id?: number,   // здесь для id необезательный тип указал\r\n    likesCount: string,\r\n}\r\n\r\n\r\nexport type StoreType = { // Типизация STORE\r\n    _state: RootStateType\r\n    _callSubscriber: (state: RootStateType) => void\r\n    getState: () => RootStateType\r\n    subscribe: (observer: (state: RootStateType) => void) => void // ????\r\n    dispatch: (action: ActionType) => void // ????\r\n}\r\n\r\nlet store: StoreType = {\r\n    _state: {\r\n        profilePage: {\r\n            posts: [\r\n                {message: 'Hello, how are you doing', likesCount: '10',},\r\n                {message: 'Hay, nothing', likesCount: '25',},\r\n                {message: 'learn React, nigger!', likesCount: '1',},\r\n            ],\r\n            newPostText: ''\r\n        },\r\n        dialogsPage: {\r\n            dialogs: [\r\n                {name: \"Andriy\", id: '1'},\r\n                {name: \"Dimych\", id: '2'},\r\n                {name: \"Vika\", id: '3'},\r\n                {name: \"Alina\", id: '4'},\r\n                {name: \"Maxim\", id: '5'}\r\n            ],\r\n            messages: [\r\n                {message: 'Hay', id: 1},\r\n                {message: 'How are you?', id: 2},\r\n                {message: 'Bye', id: 3},\r\n                {message: 'Yo', id: 4},\r\n                {message: 'Yo', id: 5},\r\n            ],\r\n            newMessageBody: ''\r\n        },\r\n        sidebar: {},\r\n    },\r\n    _callSubscriber(state: RootStateType) {\r\n    },\r\n    getState() {\r\n        return this._state\r\n    },\r\n    subscribe(observer: (state: RootStateType) => void) { // <= Правильная ли типизация тут???\r\n        this._callSubscriber = observer // Паттерн (наблюдатель)\r\n    },\r\n    dispatch(action) {\r\n        this._state.dialogsPage = dialogsReducer(this._state.dialogsPage, action)\r\n        this._state.profilePage = profileReducer(this._state.profilePage, action)\r\n        this._state.sidebar = sidebarReducer(this._state.sidebar, action)\r\n\r\n        this._callSubscriber(this._state)\r\n    }\r\n}\r\n\r\n\r\nexport default store;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Header.module.css'\r\n\r\n\r\n\r\nconst Header = () => {\r\n  return (\r\n      <header className={s.header}>\r\n          <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/1c/DC_Comics_logo.png/768px-DC_Comics_logo.png\" alt=\"avatar\"/>\r\n      </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport s from './Navbar.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to='/profile' activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Message</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a href=\"#\">News</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a href=\"#\">Music</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a href=\"#\">Settings</a>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\n\r\ntype PostType = {\r\n    message: string,\r\n    likesCount: string\r\n}\r\n\r\nconst Post = (props: PostType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://cdn.iconscout.com/icon/free/png-256/avatar-370-456322.png\" alt=\"ava\"/>\r\n            {props.message}\r\n            <div><span>{props.likesCount}</span></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {ActionType, PostsType} from '../../../redux/state';\r\nimport {addPostActionCreator, changeNewTextActionCreator} from \"../../../redux/profile-reducer\";\r\n\r\ntype MyPostsType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n    dispatch: (action: ActionType) => void\r\n}\r\n\r\nconst MyPosts = (props: MyPostsType) => {\r\n\r\n    let postsElement = props.posts.map(p => <Post key={p.id}\r\n                                                  message={p.message}\r\n                                                  likesCount={p.likesCount}/>)\r\n\r\n    let addPost = () => {\r\n        props.dispatch(addPostActionCreator())\r\n    }\r\n\r\n    const newTextChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let text = e.currentTarget.value\r\n        props.dispatch(changeNewTextActionCreator(text))\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <div>\r\n                    <textarea\r\n                        value={props.newPostText}\r\n                        onChange={newTextChangeHandler}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button onClick={addPost}>Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default MyPosts;\r\n","import React from 'react';\r\nimport s from './ProfileInfo.module.css'\r\n\r\nconst ProfileInfo = () => {\r\n    return (\r\n        <div>\r\n            <div className={s.mainImage}>\r\n                <img\r\n                    src=\"https://images.pexels.com/photos/302804/pexels-photo-302804.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940\"\r\n                    alt=\"image\"/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>ava + description</div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport MyPosts from \"./MyPosts/MyPosts\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {ActionType, ProfilePageType} from \"../../redux/state\";\r\n\r\ntype ProfileType = {\r\n    profilePage: ProfilePageType\r\n    dispatch: (action: ActionType) => void\r\n}\r\n\r\nconst Profile = (props: ProfileType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo />\r\n            <MyPosts posts={props.profilePage.posts}\r\n                     newPostText={props.profilePage.newPostText}\r\n                     dispatch={props.dispatch}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\"\r\n\r\n\r\ntype MessageType = {\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessageType) => {\r\n    return (\r\n        <div className={s.dialog}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype DialogItemType = {\r\n    name: string,\r\n    id: string\r\n}\r\n\r\nconst DialogItem = (props: DialogItemType) => {\r\n    return (\r\n        <div className={s.dialog + \" \" + s.active}>\r\n            <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React, {ChangeEvent} from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./DialogsItem/DialogsItem\";\r\nimport {sendMessageCreator, updateNewMessageBodyCreator} from \"../../redux/dialogs-reducer\";\r\nimport {StoreType} from \"../../redux/state\";\r\n\r\n\r\ntype DialogsType = {\r\n    store: StoreType\r\n}\r\n\r\nconst Dialogs = (props: DialogsType) => {\r\n\r\n    let state = props.store.getState().dialogsPage // Прокинул state в компоненту\r\n\r\n    let dialogElement = state.dialogs.map(d => <DialogItem key={d.id}\r\n                                                           name={d.name}\r\n                                                           id={d.id}/>)\r\n\r\n    let messageElement = state.messages.map(m => <Message key={m.id}\r\n                                                          message={m.message}/>)\r\n\r\n    let newMessageBody = state.newMessageBody\r\n\r\n\r\n    let onSendMessageClick = () => {\r\n        props.store.dispatch(sendMessageCreator())\r\n    }\r\n    let onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let body = e.target.value\r\n        props.store.dispatch(updateNewMessageBodyCreator(body))\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogElement}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messageElement}</div>\r\n                <div>\r\n                    <textarea\r\n                        value={newMessageBody}\r\n                        onChange={onNewMessageChange}\r\n                        placeholder={'send message'}\r\n                    ></textarea>\r\n                </div>\r\n                <div>\r\n                    <button onClick={onSendMessageClick}>Send Message</button>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {BrowserRouter, Route} from 'react-router-dom';\r\nimport './App.css';\r\nimport Header from \"./components/Header/Header\";\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport Profile from \"./components/Profile/Profile\";\r\nimport Dialogs from './components/Dialogs/Dialogs';\r\nimport {ActionType, RootStateType, StoreType} from \"./redux/state\";\r\n\r\ntype PropsType = {\r\n    state: RootStateType\r\n    dispatch: (action: ActionType) => void\r\n    store: StoreType\r\n}\r\n\r\nconst App: React.FC<PropsType> = (props) => {\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div className={'app-wrapper'}>\r\n                <Header/>\r\n                <Navbar/>\r\n                <div className={'app-wrapper-content'}>\r\n                    <Route path='/dialogs' render={() => <Dialogs\r\n                        store={props.store}\r\n                    />}/>\r\n                    <Route path='/profile' render={() =>\r\n                        <Profile\r\n                            profilePage={props.state.profilePage}\r\n                            dispatch={props.dispatch}\r\n                        />}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import store, {RootStateType} from \"./redux/state\";\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nlet rerenderEntireTree = (state: RootStateType) => {\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <App state={state}\r\n                 dispatch={store.dispatch.bind(store)}\r\n                 store={store}\r\n            />\r\n        </React.StrictMode>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\nrerenderEntireTree(store.getState())\r\n\r\n\r\nstore.subscribe(rerenderEntireTree)\r\n\r\n"],"sourceRoot":""}