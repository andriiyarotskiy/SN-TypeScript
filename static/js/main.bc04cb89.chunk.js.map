{"version":3,"sources":["api/api.ts","assets/images/user.png","HOC/WithAuthRedirect.tsx","redux/dialogs-reducer.ts","components/Users/Users.module.css","assets/images/preloader.svg","components/Navbar/Navbar.module.css","components/common/FormsControls/FormsControls.tsx","components/Navbar/Navbar.tsx","components/Header/Header.tsx","redux/auth-reducer.ts","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","utils/validators/objects-hepler.ts","redux/users-reducer.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/Users.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","HOC/WithSuspense.tsx","App.tsx","index.tsx","components/common/preloader/Preloader.tsx","components/common/FormsControls/FormsControls.module.css","utils/validators/validators.ts","components/common/Paginator/Paginator.module.css","components/Header/Header.module.css","redux/profile-reducer.ts"],"names":["instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUser","currentPage","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","getProfile","console","warn","profileAPI","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","saveProfile","profile","authAPI","me","login","email","password","rememberMe","captcha","logout","securityAPI","getCaptchaUrl","module","exports","mapStateToPropsForRedirect","state","isAuth","auth","WithAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","initialState","dialogs","name","id","messages","message","sendMessageCreator","newMessageBody","type","dialogsReducer","action","FormControl","meta","touched","error","children","hasError","className","s","formControl","Textarea","input","restProps","Input","createField","placeholder","validators","component","text","validate","Navbar","nav","item","activeClassName","activeLink","active","href","Header","header","src","alt","loginBlock","onClick","captchaUrl","setAuthUserData","payload","getCaptchaUrlSuccess","getAuthUserData","dispatch","a","resultCode","url","authReducer","HeaderContainer","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","required","style","formSummaryError","stopSubmit","_error","length","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","users","pagesize","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","setCurrentPage","toggleIsFetching","toggleFollowingProgress","followUnfollowFlow","apiMethod","actionCreator","usersReducer","followed","count","filter","Paginator","onPageChanged","totalItemsCount","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","p","cn","selectedPage","pageNumber","key","User","user","log","photos","large","userPhoto","disabled","some","Users","getUsers","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","Preloader","compose","bind","page","totalCount","initialized","globalError","appReducer","inititalState","sidebar","sidebarReducer","reducers","combineReducers","profilePage","profileReducer","dialogsPage","sidebarPage","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","WithSuspense","fallback","DialogsContainer","lazy","ProfileContainer","App","catchAllUnhandledErrors","promiseRejectionEvent","alert","initializeApp","addEventListener","removeEventListener","exact","path","render","AppContainer","withRouter","promise","Promise","all","SamuraiJSApp","ReactDOM","document","getElementById","preloader","value","maxLengthCreator","maxLength","posts","likesCount","addPostActionCreator","newPostText","setStatus","getUserProfile","file","getState","reject","newPost","postId"],"mappings":"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","file":"static/js/main.bc04cb89.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport {NullableType} from \"../utils/typeAssist\";\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"c221a774-09dc-4bbd-a2fb-6e9202854d46\"\r\n    }\r\n})\r\n\r\n\r\nexport type ResponsefolowUnfollowType<T> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: T\r\n}\r\n\r\nexport const usersAPI = {\r\n    getUser(currentPage: number, pageSize: any) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n    getProfile(userId: string) {\r\n        console.warn('Obsolete method. Please use profileAPi object')\r\n        return profileAPI.getProfile(userId)\r\n    }\r\n}\r\nexport const profileAPI = {\r\n    getProfile(userId: string) {\r\n        return instance.get(`profile/` + userId) // query parametr\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get(`profile/status/` + userId) // URI parametr\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status/`, {status})\r\n    },\r\n    savePhoto(photoFile: Blob) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile)\r\n        return instance.put(`profile/photo/`, formData, {headers: {'Content-Type': 'multipart/form-data'}})\r\n    },\r\n    saveProfile(profile: any) { // ANY!!!!!!!!!!!!!\r\n        return instance.put(`profile`, profile);\r\n    },\r\n}\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: NullableType<boolean>) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe, captcha})\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n}\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get(`security/get-captcha-url`)\r\n    },\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/user.1ec59c69.png\";","import React from \"react\"\r\nimport {Redirect} from \"react-router-dom\"\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype RedirectComponentTYPE = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const WithAuthRedirect = (Component: React.ComponentType) => {\r\n    class RedirectComponent extends React.Component<RedirectComponentTYPE> {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={\"/login\"}/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}","const SEND_MESSAGE = 'SEND_MESSAGE'\r\n\r\nexport type DialogsPageType = {\r\n    dialogs: DialogsType[]\r\n    messages: Array<MessageType>\r\n    newMessageBody?: string\r\n}\r\n\r\nexport type MessageType = {\r\n    message: string,\r\n    id: number,\r\n}\r\nexport type DialogsType = {\r\n    name: string,\r\n    id: string\r\n}\r\nexport type sendMessageCreatorType = {\r\n    type: typeof SEND_MESSAGE\r\n    newMessageBody: string\r\n}\r\nexport type ActionType = sendMessageCreatorType\r\n\r\nlet initialState: DialogsPageType = {\r\n    dialogs: [\r\n        {name: \"Andriy\", id: '1'},\r\n        {name: \"Dimych\", id: '2'},\r\n        {name: \"Vika\", id: '3'},\r\n        {name: \"Alina\", id: '4'},\r\n        {name: \"Maxim\", id: '5'}\r\n    ],\r\n    messages: [\r\n        {message: 'Hay', id: 1},\r\n        {message: 'How are you?', id: 2},\r\n        {message: 'Bye', id: 3},\r\n        {message: 'Yo', id: 4},\r\n        {message: 'Yo', id: 5},\r\n    ]\r\n}\r\n\r\nconst dialogsReducer = (state: DialogsPageType = initialState, action: ActionType): DialogsPageType => {\r\n\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {message: action.newMessageBody, id: 6}]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const sendMessageCreator = (newMessageBody: string): sendMessageCreatorType => ({\r\n    type: SEND_MESSAGE,\r\n    newMessageBody\r\n})\r\n\r\nexport default dialogsReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__3FPWP\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.e83164ec.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2UV_k\",\"item\":\"Navbar_item__psXG3\",\"activeLink\":\"Navbar_activeLink__3Vsg1\"};","import React from \"react\"\r\nimport s from \"./FormsControls.module.css\"\r\nimport {Field} from \"redux-form\";\r\n\r\nconst FormControl = ({meta: {touched, error}, children}: any) => {\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}><textarea {...input}{...restProps}/></FormControl>\r\n    )\r\n}\r\nexport const Input = (props: any) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}><input {...input}{...restProps}/></FormControl>\r\n    )\r\n}\r\n\r\n\r\n// type createFieldType = {\r\n//     placeholder: string,\r\n//     name: string,\r\n//     validators: Array<RequiredValidateType>,\r\n//     component: any,\r\n//     type: {\r\n//         type: string\r\n//     }\r\n// }\r\nexport const createField = (placeholder: any, name: any, validators: any, component: any, props = {}, text = '') => {\r\n    return <div>\r\n        <Field\r\n            {...props}\r\n            placeholder={placeholder}\r\n            name={name}\r\n            component={component}\r\n            validate={validators}\r\n        /> {text}\r\n    </div>\r\n}","import React from 'react';\r\nimport s from './Navbar.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to='/profile' activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Message</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a href=\"#\">News</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a href=\"#\">Music</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a href=\"#\">Settings</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport s from './Header.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype HeaderPropsType = {\r\n    isAuth: boolean,\r\n    login: string | null\r\n    logout: () => void\r\n}\r\n\r\nconst Header = (props: HeaderPropsType) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img\r\n                src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/1c/DC_Comics_logo.png/768px-DC_Comics_logo.png\"\r\n                alt=\"avatar\"/>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth\r\n                    ? <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import {authAPI, securityAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {Dispatch} from \"redux\";\r\nimport {NullableType} from \"../utils/typeAssist\";\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA'\r\nconst GET_CAPTCHA_URL_SUCCESS = 'GET_CAPTCHA_URL_SUCCESS'\r\n\r\n\r\nexport type SetAuthUserDataACTYPE = ReturnType<typeof setAuthUserData>\r\nexport type getCaptchaUrlACTYPE = ReturnType<typeof getCaptchaUrlSuccess>\r\ntype ActionType = SetAuthUserDataACTYPE | getCaptchaUrlACTYPE\r\n\r\nexport type AuthType = {\r\n    id: NullableType<number>,\r\n    email: NullableType<string>,\r\n    login: NullableType<string>\r\n    isAuth: boolean\r\n    userId: NullableType<number>\r\n    captchaUrl: NullableType<string>\r\n}\r\n\r\nlet initialState: AuthType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    userId: 9460,\r\n    captchaUrl: null // if null captcha is not required\r\n    // isFetching: true,\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionType): AuthType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        case GET_CAPTCHA_URL_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// ACTION CREATORS\r\nexport const setAuthUserData = (userId: NullableType<number>, email: NullableType<string>, login: NullableType<string>, isAuth: boolean) => ({\r\n    type: SET_USER_DATA,\r\n    payload: {userId, email, login, isAuth}\r\n} as const)\r\n\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string) => ({\r\n    type: GET_CAPTCHA_URL_SUCCESS,\r\n    payload: {\r\n        captchaUrl\r\n    }\r\n} as const)\r\n\r\n//THUNK\r\nexport const getAuthUserData = () => async (dispatch: Dispatch) => {\r\n    let response = await authAPI.me()\r\n    if (response.data.resultCode === 0) {\r\n        let {id, email, login} = response.data.data\r\n        dispatch(setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: boolean) => async (dispatch: any) => {\r\n    dispatch(stopSubmit(\"login\", {_error: \"Common error\"}))\r\n    let response = await authAPI.login(email, password, rememberMe, captcha)\r\n    if (response.data.resultCode === 0) {\r\n        // success, get auth data\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        if (response.data.resultCode === 10) {\r\n            dispatch(getCaptchaUrl())\r\n        }\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\"\r\n        dispatch(stopSubmit(\"login\", {_error: message}))\r\n    }\r\n}\r\nexport const logout = () => async (dispatch: Dispatch) => {\r\n    let response = await authAPI.logout()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false))\r\n\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = () => async (dispatch: any) => {\r\n    const response = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = response.data.url\r\n    dispatch(getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\n\r\nexport default authReducer;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\ntype MapDispatchPropsType = {\r\n    logout: () => void\r\n}\r\ntype RootPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\nclass HeaderContainer extends React.Component<RootPropsType> {\r\n\r\n    render() {\r\n        return (\r\n            <Header {...this.props}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n})\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer);\r\n","import React from \"react\"\r\nimport {reduxForm, InjectedFormProps} from \"redux-form\";\r\nimport {Input, createField} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport style from \"../../components/common/FormsControls/FormsControls.module.css\"\r\nimport {NullableType} from \"../../utils/typeAssist\";\r\n\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: boolean\r\n}\r\n\r\ntype LoginFormOwnType = { captchaUrl: NullableType<string> }\r\n\r\nconst LoginForm = ({handleSubmit, error, captchaUrl}: InjectedFormProps<FormDataType, LoginFormOwnType> & LoginFormOwnType) => { // child component\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField('Email', 'email', [required], Input, {type: 'text'})}\r\n            {createField('Password', 'password', [required], Input, {type: 'text'})}\r\n            {createField(null, 'rememberMe', [], Input, {type: 'checkbox'}, 'remember me')}\r\n            {captchaUrl && <img src={captchaUrl} alt=\"captcha\"/>}\r\n            {captchaUrl && createField(\"Symbols from image\", 'captcha', [required], Input, {}, '')}\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType, LoginFormOwnType>({form: 'login'})(LoginForm)\r\n\r\ntype LoginType = {\r\n    isAuth: boolean,\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: any) => void\r\n    captchaUrl: NullableType<string>\r\n}\r\n\r\nconst Login = (props: LoginType) => {  // parent component\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport default connect(mapStateToProps, {login})(Login)\r\n","import {UsersType} from \"../../redux/users-reducer\";\r\n\r\nexport const updateObjectInArray = (items: UsersType[], itemId: number, objPropName: string, newObjProps: {followed: boolean}) => {\r\n    return items.map((u: any) => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u\r\n    })\r\n}","import {usersAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {updateObjectInArray} from \"../utils/validators/objects-hepler\";\r\n\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET_USERS'\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\n\r\nexport type UsersPageType = {\r\n    users: Array<UsersType>\r\n    pagesize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\nexport type UsersType = {\r\n    id: number\r\n    photoUrl: string\r\n    followed: boolean\r\n    fullName: string\r\n    status: string\r\n    location: LocationType\r\n}\r\nexport type LocationType = {\r\n    country: string,\r\n    city: string\r\n}\r\n\r\nexport type FollowACType = {\r\n    type: typeof FOLLOW\r\n    userId: number\r\n}\r\nexport type UnfollowACType = {\r\n    type: typeof UNFOLLOW\r\n    userId: number\r\n}\r\nexport type SetUsersACType = {\r\n    type: typeof SET_USERS\r\n    users: Array<UsersType>\r\n}\r\nexport type SetCurrentPageACType = {\r\n    type: typeof SET_CURRENT_PAGE\r\n    currentPage: number\r\n}\r\nexport type SetTotalUsersCountAC = {\r\n    type: typeof SET_TOTAL_USERS_COUNT\r\n    count: number\r\n}\r\nexport type ToggleIsFetchingACType = {\r\n    type: typeof TOGGLE_IS_FETCHING\r\n    isFetching: boolean\r\n}\r\nexport type ToggleFollowingProgressACTYPE = {\r\n    type: typeof TOGGLE_IS_FOLLOWING_PROGRESS\r\n    isFetching: boolean\r\n    userId: number\r\n}\r\nexport type UsersACTYPE = FollowACType | UnfollowACType | SetUsersACType\r\n    | SetCurrentPageACType\r\n    | SetTotalUsersCountAC\r\n    | ToggleIsFetchingACType\r\n    | ToggleFollowingProgressACTYPE\r\n\r\nlet initialState: UsersPageType = {\r\n    users: [] as Array<UsersType>,\r\n    pagesize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: UsersACTYPE): UsersPageType => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            debugger\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case SET_CURRENT_PAGE : { // TEST!!!!!\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT : { // TEST!!!!!\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case TOGGLE_IS_FETCHING : { // TEST!!!!!\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS : {\r\n            return {\r\n                ...state, followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const followSuccess = (userId: number): FollowACType => ({type: FOLLOW, userId})\r\nexport const unfollowSuccess = (userId: number): UnfollowACType =>\r\n    ({type: UNFOLLOW, userId})\r\nexport const setUsers = (users: Array<UsersType>): SetUsersACType =>\r\n    ({type: SET_USERS, users})\r\n\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageACType => ({type: SET_CURRENT_PAGE, currentPage})\r\nexport const setTotalUsersCount = (totalUsersCount: number): SetTotalUsersCountAC => {\r\n    return {type: SET_TOTAL_USERS_COUNT, count: totalUsersCount}\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean): ToggleIsFetchingACType => {\r\n    return {type: TOGGLE_IS_FETCHING, isFetching}\r\n}\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number): ToggleFollowingProgressACTYPE => {\r\n    return {type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId}\r\n}\r\n\r\n//Thunk\r\nexport const requestUsers = (page: number, pageSize: number) => async (dispatch: Dispatch) => { // any dispatch\r\n    dispatch(toggleIsFetching(true))\r\n    dispatch(setCurrentPage(page))\r\n    let data = await usersAPI.getUser(page, pageSize)\r\n    dispatch(toggleIsFetching(false))\r\n    dispatch(setUsers(data.items))\r\n    dispatch(setTotalUsersCount(data.totalCount))\r\n}\r\n\r\n// type followUnfollowType = {\r\n//     dispatch: Dispatch,\r\n//     userId: number,\r\n//     apiMethod: (userId: number) => ResponsefolowUnfollowType<{resultCode: number}>\r\n//     actionCreator: any\r\n// }\r\n//Вспомогательный метод\r\n\r\nconst followUnfollowFlow = async (dispatch: any, userId: any, apiMethod: any, actionCreator: any) => {\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n    let response = await apiMethod(userId)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId))\r\n\r\n}\r\n\r\nexport const follow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        await followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess)\r\n    }\r\n}\r\nexport const unfollow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        await followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess)\r\n    }\r\n}\r\n\r\n\r\nexport default usersReducer;","import React, {useState} from \"react\";\r\nimport styles from './Paginator.module.css';\r\nimport cn from 'classnames'\r\n\r\n\r\ntype PaginatorType = {\r\n    currentPage: number\r\n    pageSize: number\r\n    totalItemsCount: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nlet Paginator = ({currentPage, onPageChanged, pageSize, totalItemsCount, portionSize = 10}: PaginatorType) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return <div className={styles.paginator}>\r\n        {portionNumber > 1 &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber - 1)\r\n        }}>PREV</button>}\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map((p) => {\r\n                return <span className={cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }, styles.pageNumber)}\r\n                             key={p}\r\n                             onClick={() => {\r\n                                 onPageChanged(p);\r\n                             }}>{p}</span>\r\n            })}\r\n        {portionCount > portionNumber &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber + 1)\r\n        }}>NEXT</button>}\r\n    </div>\r\n}\r\nexport default Paginator;","import React from \"react\";\r\nimport userPhoto from '../../assets/images/user.png'\r\nimport styles from './Users.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nlet User = ({user, followingInProgress, ...props}: any) => {\r\n    console.log(user.followed)\r\n    return (\r\n        <div>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={'profile/' + user.id}>\r\n                        <img src={user.photos.large !== null ? user.photos.large : userPhoto}\r\n                             className={styles.userPhoto} alt=''/>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {user.followed\r\n                            ? <button\r\n                                disabled={followingInProgress.some((id: number) => id === user.id)} // если ИДшка равна user.id то тогда кнопка дизейблится\r\n                                onClick={() => {\r\n                                    props.unfollow(user.id)\r\n                                }}>Unfollow</button>\r\n                            : <button\r\n                                disabled={followingInProgress.some((id: number) => id === user.id)} // если ИДшка равна user.id то тогда кнопка дизейблится\r\n                                onClick={() => {\r\n                                    props.follow(user.id)\r\n                                }}>Follow</button>}\r\n                    </div>\r\n                </span>\r\n            <span>\r\n                    <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{\"user.location.country\"}</div>\r\n                        <div>{\"user.location.city\"}</div>\r\n                    </span>\r\n                </span>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default User","import React from \"react\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\n\r\n\r\nlet Users = ({currentPage, onPageChanged, pageSize, totalUsersCount, users, ...props}: any) => {\r\n\r\n    return <div>\r\n        <Paginator currentPage={currentPage}\r\n                   onPageChanged={onPageChanged}\r\n                   pageSize={pageSize}\r\n                   totalItemsCount={totalUsersCount}\r\n        />\r\n        {\r\n            users.map((u: any) => <User user={u} key={u.id}\r\n                                        followingInProgress={props.followingInProgress}\r\n                                        unfollow={props.unfollow}\r\n                                        follow={props.follow}\r\n\r\n            />)\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default Users","import {AppStateType} from \"./redux-store\";\r\nimport {createSelector} from 'reselect'\r\nimport {UsersType} from \"./users-reducer\";\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector, (users: UsersType[]) => {\r\n    return users.filter((u: UsersType) => true)\r\n})\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pagesize\r\n}\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    setCurrentPage,\r\n    follow,\r\n    unfollow, UsersPageType, toggleFollowingProgress, requestUsers,\r\n} from \"../../redux/users-reducer\";\r\nimport Users from \"./Users\";\r\nimport {Preloader} from \"../common/preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from \"../../redux/users-selectors\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {WithAuthRedirect} from \"../../HOC/WithAuthRedirect\";\r\n\r\n// type UsersContainerType = {\r\n//     toggleIsFetching: (arg0: boolean) => void\r\n//     setUsers: (items: any) => void\r\n//     setTotalUsersCount: (totalCount: number) => void\r\n//     setCurrentPage: (pageNumber: number) => void\r\n//     pageSize: number\r\n//     currentPage: number\r\n//     isFetching: boolean\r\n//     totalItemsCount: number\r\n//     users: Array<UsersType>\r\n//     follow: boolean\r\n//     unfollow: boolean\r\n// }\r\n\r\nclass UsersContainer extends React.Component<any, UsersPageType> { // первый пропсы && второй стейт\r\n    componentDidMount() {\r\n        const {currentPage, pageSize} = this.props\r\n        this.props.getUsers(currentPage, pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {pageSize} = this.props\r\n        this.props.getUsers(pageNumber, pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   onPageChanged={this.onPageChanged}\r\n                   users={this.props.users}\r\n                   follow={this.props.follow}\r\n                   unfollow={this.props.unfollow}\r\n                   toggleFollowingProgress={this.props.toggleFollowingProgress}\r\n                   followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\n\r\n// let mapStateToProps = (state: usersStatePageType) => {\r\n//     return {\r\n//         users: state.usersPage.users,\r\n//         pageSize: state.usersPage.pagesize,\r\n//         totalItemsCount: state.usersPage.totalItemsCount,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         followingInProgress: state.usersPage.followingInProgress\r\n//     }\r\n// }\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\nexport default compose<any>(\r\n    WithAuthRedirect,\r\n    connect(mapStateToProps, {\r\n        follow, unfollow, setCurrentPage,\r\n        toggleFollowingProgress, getUsers: requestUsers\r\n    })\r\n)(UsersContainer)\r\n","import {getAuthUserData, SetAuthUserDataACTYPE} from \"./auth-reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS'\r\n\r\n\r\ntype InitializeSuccessACTYPE = ReturnType<typeof initializedSuccess>\r\ntype ActionType = InitializeSuccessACTYPE | SetAuthUserDataACTYPE\r\n\r\nexport type AppType = {\r\n    initialized: boolean\r\n    globalError: null\r\n}\r\n\r\nlet initialState: AppType = {\r\n    initialized: false,\r\n    globalError: null\r\n\r\n}\r\n\r\nconst appReducer = (state = initialState, action: ActionType): AppType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializedSuccess = () => ({\r\n    type: INITIALIZED_SUCCESS,\r\n} as const)\r\n\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess())\r\n        })\r\n}\r\nexport default appReducer;","\r\n\r\nexport type sidebarType = {}\r\n\r\nlet inititalState: sidebarType = {\r\n    sidebar: {}\r\n}\r\n\r\nconst sidebarReducer = (state = inititalState, action: any ): sidebarType => {\r\n\r\n    return state\r\n}\r\n\r\nexport default sidebarReducer;","import {applyMiddleware, combineReducers, createStore, compose} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet reducers = combineReducers(\r\n    {\r\n        profilePage: profileReducer,\r\n        dialogsPage: dialogsReducer,\r\n        sidebarPage: sidebarReducer,\r\n        usersPage: usersReducer,\r\n        auth: authReducer,\r\n        form: formReducer,\r\n        app: appReducer,\r\n    }\r\n)\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\nexport default store","import React, {Suspense} from \"react\"\r\nimport {Preloader} from \"../components/common/preloader/Preloader\";\r\n\r\nexport const WithSuspense = (Component: React.ComponentType) => {\r\n    return (props: any) => {\r\n        return <Suspense fallback={<Preloader/>}>\r\n            <Component {...props} />\r\n        </Suspense>\r\n    }\r\n}","import React from 'react';\r\nimport {HashRouter, Route, withRouter, Switch, Redirect} from 'react-router-dom';\r\nimport './App.css';\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Login from './components/Login/Login';\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport store, {AppStateType} from \"./redux/redux-store\";\r\nimport {Preloader} from \"./components/common/preloader/Preloader\";\r\nimport {WithSuspense} from \"./HOC/WithSuspense\";\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\n\r\ntype AppType = {\r\n    initialized: boolean\r\n    initializeApp: () => boolean\r\n}\r\n\r\n\r\nclass App extends React.Component<AppType> {\r\n\r\n    catchAllUnhandledErrors = (promiseRejectionEvent: any) => {\r\n        alert(\"Some error occured\")\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    componentWillUnmount(): void {\r\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n    }\r\n\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n        return (\r\n            <div className={'app-wrapper'}>\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n\r\n                <div className={'app-wrapper-content'}>\r\n                    <Switch>\r\n                        <Route exact path='/' render={() => <Redirect to={\"/profile\"}/>}/>\r\n\r\n                        <Route path='/dialogs' render={WithSuspense(DialogsContainer)}/>\r\n                        <Route path='/profile/:userId?' render={WithSuspense(ProfileContainer)}/>\r\n                        <Route path='/users' render={() =>\r\n                            <UsersContainer/>}\r\n                        />\r\n                        <Route path='/login' render={() =>\r\n                            <Login/>}\r\n                        />\r\n                        <Route path='*' render={() =>\r\n                            <div>404 NOT FOUND</div>}/>\r\n                    </Switch>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\nconst AppContainer = compose<any>(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp}))\r\n(App);\r\n\r\nconst SamuraiJSApp = () => {\r\n    return <HashRouter>\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </HashRouter>\r\n}\r\n\r\nexport default SamuraiJSApp;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport SamuraiJSApp from \"./App\";\r\n\r\n\r\nReactDOM.render(\r\n    <SamuraiJSApp/>,\r\n    document.getElementById('root')\r\n);","import React from 'react';\r\nimport preloader from '../../../assets/images/preloader.svg'\r\nexport const Preloader = () => {\r\n    return <div>\r\n        <img src={preloader} alt=\"\"/>\r\n    </div>\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2PnCH\",\"error\":\"FormsControls_error__1k2Ld\",\"formSummaryError\":\"FormsControls_formSummaryError__12Zz5\"};","export type RequiredValidateType = (value: string) => string | undefined\r\n\r\nexport const required = (value: string): string | undefined => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value && value.length > 30) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__4Y2ZP\",\"pageNumber\":\"Paginator_pageNumber__1zjHb\",\"selectedPage\":\"Paginator_selectedPage__35ed7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2I21n\",\"loginBlock\":\"Header_loginBlock__VM9IS\"};","import {profileAPI, usersAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {NullableType} from \"../utils/typeAssist\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst DELETE_POST = 'DELETE_POST';\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_STATUS = 'SET_STATUS';\r\nconst SAVE_PHOTO_SUCCESS = 'SAVE_PHOTO_SUCCESS';\r\n\r\nexport type ProfilePageType = {\r\n    profile: any // NullableType<ProfileType>\r\n    posts: Array<PostsType>\r\n    status: string\r\n}\r\nexport type PostsType = {\r\n    message: string,\r\n    id?: number,   // здесь для id необезательный тип указал\r\n    likesCount: string,\r\n}\r\n\r\nexport type ProfilePhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport type ProfileContactType = {\r\n    facebook: string\r\n    website: NullableType<string>\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    youtube: NullableType<string>\r\n    github: string\r\n    mainLink: NullableType<string>\r\n}\r\n\r\nexport type KeyContactsType = Array<keyof ProfileContactType>\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string,\r\n    contacts: ProfileContactType //ProfileContactType,\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: ProfilePhotosType\r\n}\r\n\r\nexport type ActionType = AddPostActionCreatorType\r\n    | SetUserProfileACTYPE\r\n    | setStatusType\r\n    | deletePostActionCreatorType\r\n    | savePhotoSuccessType\r\n\r\nexport type AddPostActionCreatorType = {\r\n    type: typeof ADD_POST\r\n    newPostText: string\r\n}\r\n\r\nlet initialState: ProfilePageType = {\r\n    posts: [\r\n        {message: 'Hello, how are you doing', likesCount: '10', id: 1},\r\n        {message: 'Hay, nothing', likesCount: '25', id: 2},\r\n        {message: 'learn React, nigger!', likesCount: '1', id: 3},\r\n    ],\r\n    profile: null,\r\n    status: ''\r\n}\r\n\r\nconst profileReducer = (state = initialState, action: ActionType): ProfilePageType => {\r\n\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            let newPost = {\r\n                id: 4,\r\n                message: action.newPostText,\r\n                likesCount: '28'\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            }\r\n        case DELETE_POST:\r\n            return {\r\n                ...state, posts: state.posts.filter(p => p.id !== action.postId)\r\n            }\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case SAVE_PHOTO_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos}\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const addPostActionCreator = (newPostText: string): AddPostActionCreatorType => ({type: ADD_POST, newPostText})\r\nexport const deletePost = (postId: number) => ({type: DELETE_POST, postId} as const)\r\nexport type SetUserProfileACTYPE = {\r\n    type: typeof SET_USER_PROFILE\r\n    profile: ProfileType\r\n}\r\n\r\nexport const setUserProfile = (profile: ProfileType): SetUserProfileACTYPE => ({type: SET_USER_PROFILE, profile})\r\nexport const setStatus = (status: string) => ({type: SET_STATUS, status}) as const\r\nexport const savePhotoSuccess = (photos: ProfilePhotosType) => ({type: SAVE_PHOTO_SUCCESS, photos}) as const\r\n\r\n\r\nexport type deletePostActionCreatorType = ReturnType<typeof deletePost>\r\nexport type setStatusType = ReturnType<typeof setStatus>\r\nexport type savePhotoSuccessType = ReturnType<typeof savePhotoSuccess>\r\n\r\n\r\n// THUNK\r\nexport const getUserProfile = (userId: string) => async (dispatch: any) => {\r\n    let response = await usersAPI.getProfile(userId)\r\n    dispatch(setUserProfile(response.data))\r\n}\r\nexport const getStatus = (userId: string) => async (dispatch: any) => {\r\n    let response = await profileAPI.getStatus(userId)\r\n    dispatch(setStatus(response.data))\r\n}\r\nexport const updateStatus = (status: string) => async (dispatch: any) => {\r\n    try {\r\n        let response = await profileAPI.updateStatus(status)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setStatus(status))\r\n        }\r\n    } catch (error) {\r\n        // catching error\r\n    }\r\n}\r\nexport const savePhoto = (file: Blob) => async (dispatch: Dispatch) => { // any!!!!!!!\r\n    let response = await profileAPI.savePhoto(file)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(savePhotoSuccess(response.data.data.photos))\r\n    }\r\n}\r\nexport const saveProfile = (profile: ProfileType) => async (dispatch: any, getState: any) => { // any!!!!!!!\r\n    const userId = getState().auth.userId;\r\n    const response = await profileAPI.saveProfile(profile)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getUserProfile(userId))\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: response.data.messages[0]}))\r\n        return Promise.reject(response.data.messages[0])\r\n    }\r\n}\r\n\r\nexport default profileReducer;"],"sourceRoot":""}