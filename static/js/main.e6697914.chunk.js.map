{"version":3,"sources":["redux/dialogs-reducer.ts","api/api.ts","assets/images/user.png","components/Users/Users.module.css","assets/images/preloader.svg","components/Navbar/Navbar.module.css","components/Navbar/Navbar.tsx","components/Header/Header.tsx","redux/auth-reducer.ts","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","utils/validators/objects-hepler.ts","redux/users-reducer.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/Users.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","HOC/WithSuspense.tsx","App.tsx","index.tsx","components/common/FormsControls/FormsControls.tsx","components/common/preloader/Preloader.tsx","components/common/FormsControls/FormsControls.module.css","components/common/Paginator/Paginator.module.css","utils/validators/validators.ts","components/Header/Header.module.css","redux/profile-reducer.ts"],"names":["initialState","dialogs","name","id","messages","message","sendMessageCreator","newMessageBody","type","dialogsReducer","state","action","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUser","currentPage","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","getProfile","console","warn","profileAPI","getStatus","updateStatus","status","put","authAPI","me","login","email","password","rememberMe","logout","module","exports","Navbar","className","s","nav","item","to","activeClassName","activeLink","active","href","Header","props","header","src","alt","loginBlock","isAuth","onClick","setAuthUserData","payload","getAuthUserData","dispatch","a","resultCode","authReducer","HeaderContainer","this","React","Component","connect","auth","LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","createField","required","Input","style","formSummaryError","stopSubmit","_error","length","formData","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","users","pagesize","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","setCurrentPage","toggleIsFetching","toggleFollowingProgress","followUnfollowFlow","apiMethod","actionCreator","usersReducer","followed","count","filter","Paginator","onPageChanged","totalItemsCount","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","p","cn","selectedPage","pageNumber","key","User","user","log","photos","small","userPhoto","disabled","some","Users","getUsers","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","Preloader","compose","bind","page","totalCount","initialized","appReducer","inititalState","sidebar","sidebarReducer","reducers","combineReducers","profilePage","profileReducer","dialogsPage","sidebarPage","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","WithSuspense","fallback","DialogsContainer","lazy","ProfileContainer","App","initializeApp","path","render","AppContainer","withRouter","promise","Promise","all","SamuraiJSApp","ReactDOM","document","getElementById","FormControl","meta","touched","children","hasError","formControl","Textarea","input","restProps","placeholder","validators","component","text","validate","preloader","value","maxLengthCreator","maxLength","posts","likesCount","profile","addPostActionCreator","newPostText","setStatus","getUserProfile","newPost","postId"],"mappings":"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","file":"static/js/main.e6697914.chunk.js","sourcesContent":["const SEND_MESSAGE = 'SEND_MESSAGE'\r\n\r\nexport type DialogsPageType = {\r\n    dialogs: DialogsType[]\r\n    messages: Array<MessageType>\r\n    newMessageBody?: string\r\n}\r\n\r\nexport type MessageType = {\r\n    message: string,\r\n    id: number,\r\n}\r\nexport type DialogsType = {\r\n    name: string,\r\n    id: string\r\n}\r\nexport type sendMessageCreatorType = {\r\n    type: typeof SEND_MESSAGE\r\n    newMessageBody: string\r\n}\r\nexport type ActionType = sendMessageCreatorType\r\n\r\nlet initialState: DialogsPageType = {\r\n    dialogs: [\r\n        {name: \"Andriy\", id: '1'},\r\n        {name: \"Dimych\", id: '2'},\r\n        {name: \"Vika\", id: '3'},\r\n        {name: \"Alina\", id: '4'},\r\n        {name: \"Maxim\", id: '5'}\r\n    ],\r\n    messages: [\r\n        {message: 'Hay', id: 1},\r\n        {message: 'How are you?', id: 2},\r\n        {message: 'Bye', id: 3},\r\n        {message: 'Yo', id: 4},\r\n        {message: 'Yo', id: 5},\r\n    ]\r\n}\r\n\r\nconst dialogsReducer = (state: DialogsPageType = initialState, action: ActionType): DialogsPageType => {\r\n\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {message: action.newMessageBody, id: 6}]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const sendMessageCreator = (newMessageBody: string): sendMessageCreatorType => ({\r\n    type: SEND_MESSAGE,\r\n    newMessageBody\r\n})\r\n\r\nexport default dialogsReducer;","import axios from \"axios\";\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"c221a774-09dc-4bbd-a2fb-6e9202854d46\"\r\n    }\r\n})\r\n\r\n\r\nexport type ResponsefolowUnfollowType<T> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: T\r\n}\r\n\r\nexport const usersAPI = {\r\n    getUser(currentPage: number, pageSize: any) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n    getProfile(userId: string) {\r\n        console.warn('Obsolete method. Please use profileAPi object')\r\n        return profileAPI.getProfile(userId)\r\n    }\r\n}\r\nexport const profileAPI = {\r\n    getProfile(userId: string) {\r\n        return instance.get(`profile/` + userId) // query parametr\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get(`status/` + userId) // URI parametr\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status/`, {status})\r\n    },\r\n}\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe = false) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/user.1ec59c69.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__3FPWP\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.e83164ec.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2UV_k\",\"item\":\"Navbar_item__psXG3\",\"activeLink\":\"Navbar_activeLink__3Vsg1\"};","import React from 'react';\r\nimport s from './Navbar.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to='/profile' activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Message</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a href=\"#\">News</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a href=\"#\">Music</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a href=\"#\">Settings</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport s from './Header.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype HeaderPropsType = {\r\n    isAuth: boolean,\r\n    login: string | null\r\n    logout: () => void\r\n}\r\n\r\nconst Header = (props: HeaderPropsType) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img\r\n                src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/1c/DC_Comics_logo.png/768px-DC_Comics_logo.png\"\r\n                alt=\"avatar\"/>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth\r\n                    ? <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import {authAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA'\r\n\r\n\r\nexport type SetAuthUserDataACTYPE = ReturnType<typeof setAuthUserData>\r\ntype ActionType = SetAuthUserDataACTYPE\r\n\r\nexport type AuthType = {\r\n    id: null | number,\r\n    email: null | string,\r\n    login: null | string\r\n    isAuth: boolean\r\n    userId: number | null\r\n}\r\n\r\nlet initialState: AuthType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    userId: 9460\r\n    // isFetching: true,\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionType): AuthType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n    type: SET_USER_DATA,\r\n    payload: {userId, email, login, isAuth}\r\n} as const)\r\n\r\n\r\nexport const getAuthUserData = () => async (dispatch: Dispatch) => {\r\n    let response = await authAPI.me()\r\n    if (response.data.resultCode === 0) {\r\n        let {id, email, login} = response.data.data\r\n        dispatch(setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean) => async (dispatch: ThunkDispatch<any, any, any>) => {\r\n    dispatch(stopSubmit(\"login\", {_error: \"Common error\"}))\r\n    let response = await authAPI.login(email, password, rememberMe)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\"\r\n        dispatch(stopSubmit(\"login\", {_error: message}))\r\n    }\r\n}\r\nexport const logout = () => async (dispatch: Dispatch) => {\r\n    let response = await authAPI.logout()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false))\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default authReducer;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\ntype MapDispatchPropsType = {\r\n    logout: () => void\r\n}\r\ntype RootPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\nclass HeaderContainer extends React.Component<RootPropsType> {\r\n\r\n    render() {\r\n        return (\r\n            <Header {...this.props}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n})\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer);\r\n","import React from \"react\"\r\nimport {reduxForm, InjectedFormProps} from \"redux-form\";\r\nimport {Input, createField} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport style from \"../../components/common/FormsControls/FormsControls.module.css\"\r\n\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst LoginForm = ({handleSubmit, error}: InjectedFormProps<FormDataType>) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n                {createField('Email', 'email', [required], Input, {type: 'text'})}\r\n                {createField('Password', 'password', [required], Input, {type: 'text'})}\r\n                {createField(null, 'rememberMe', [], Input, {type: 'checkbox'},'remember me')}\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\r\n\r\ntype LoginType = {\r\n    isAuth: boolean,\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\n\r\nconst Login = (props: LoginType) => {\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport default connect(mapStateToProps, {login})(Login)\r\n","import {UsersType} from \"../../redux/users-reducer\";\r\n\r\nexport const updateObjectInArray = (items: UsersType[], itemId: number, objPropName: string, newObjProps: {followed: boolean}) => {\r\n    return items.map((u: any) => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u\r\n    })\r\n}","import {usersAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {updateObjectInArray} from \"../utils/validators/objects-hepler\";\r\n\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET_USERS'\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\n\r\nexport type UsersPageType = {\r\n    users: Array<UsersType>\r\n    pagesize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\nexport type UsersType = {\r\n    id: number\r\n    photoUrl: string\r\n    followed: boolean\r\n    fullName: string\r\n    status: string\r\n    location: LocationType\r\n}\r\nexport type LocationType = {\r\n    country: string,\r\n    city: string\r\n}\r\n\r\nexport type FollowACType = {\r\n    type: typeof FOLLOW\r\n    userId: number\r\n}\r\nexport type UnfollowACType = {\r\n    type: typeof UNFOLLOW\r\n    userId: number\r\n}\r\nexport type SetUsersACType = {\r\n    type: typeof SET_USERS\r\n    users: Array<UsersType>\r\n}\r\nexport type SetCurrentPageACType = {\r\n    type: typeof SET_CURRENT_PAGE\r\n    currentPage: number\r\n}\r\nexport type SetTotalUsersCountAC = {\r\n    type: typeof SET_TOTAL_USERS_COUNT\r\n    count: number\r\n}\r\nexport type ToggleIsFetchingACType = {\r\n    type: typeof TOGGLE_IS_FETCHING\r\n    isFetching: boolean\r\n}\r\nexport type ToggleFollowingProgressACTYPE = {\r\n    type: typeof TOGGLE_IS_FOLLOWING_PROGRESS\r\n    isFetching: boolean\r\n    userId: number\r\n}\r\nexport type UsersACTYPE = FollowACType | UnfollowACType | SetUsersACType\r\n    | SetCurrentPageACType\r\n    | SetTotalUsersCountAC\r\n    | ToggleIsFetchingACType\r\n    | ToggleFollowingProgressACTYPE\r\n\r\nlet initialState: UsersPageType = {\r\n    users: [] as Array<UsersType>,\r\n    pagesize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: UsersACTYPE): UsersPageType => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            debugger\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case SET_CURRENT_PAGE : { // TEST!!!!!\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT : { // TEST!!!!!\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case TOGGLE_IS_FETCHING : { // TEST!!!!!\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS : {\r\n            return {\r\n                ...state, followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const followSuccess = (userId: number): FollowACType => ({type: FOLLOW, userId})\r\nexport const unfollowSuccess = (userId: number): UnfollowACType =>\r\n    ({type: UNFOLLOW, userId})\r\nexport const setUsers = (users: Array<UsersType>): SetUsersACType =>\r\n    ({type: SET_USERS, users})\r\n\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageACType => ({type: SET_CURRENT_PAGE, currentPage})\r\nexport const setTotalUsersCount = (totalUsersCount: number): SetTotalUsersCountAC => {\r\n    return {type: SET_TOTAL_USERS_COUNT, count: totalUsersCount}\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean): ToggleIsFetchingACType => {\r\n    return {type: TOGGLE_IS_FETCHING, isFetching}\r\n}\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number): ToggleFollowingProgressACTYPE => {\r\n    return {type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId}\r\n}\r\n\r\n//Thunk\r\nexport const requestUsers = (page: number, pageSize: number) => async (dispatch: Dispatch) => { // any dispatch\r\n    dispatch(toggleIsFetching(true))\r\n    dispatch(setCurrentPage(page))\r\n    let data = await usersAPI.getUser(page, pageSize)\r\n    dispatch(toggleIsFetching(false))\r\n    dispatch(setUsers(data.items))\r\n    dispatch(setTotalUsersCount(data.totalCount))\r\n}\r\n\r\n// type followUnfollowType = {\r\n//     dispatch: Dispatch,\r\n//     userId: number,\r\n//     apiMethod: (userId: number) => ResponsefolowUnfollowType<{resultCode: number}>\r\n//     actionCreator: any\r\n// }\r\n//Вспомогательный метод\r\n\r\nconst followUnfollowFlow = async (dispatch: any, userId: any, apiMethod: any, actionCreator: any) => {\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n    let response = await apiMethod(userId)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId))\r\n\r\n}\r\n\r\nexport const follow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        await followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess)\r\n    }\r\n}\r\nexport const unfollow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        await followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess)\r\n    }\r\n}\r\n\r\n\r\nexport default usersReducer;","import React, {useState} from \"react\";\r\nimport styles from './Paginator.module.css';\r\nimport cn from 'classnames'\r\n\r\n\r\ntype PaginatorType = {\r\n    currentPage: number\r\n    pageSize: number\r\n    totalItemsCount: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nlet Paginator = ({currentPage, onPageChanged, pageSize, totalItemsCount, portionSize = 10}: PaginatorType) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return <div className={styles.paginator}>\r\n        {portionNumber > 1 &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber - 1)\r\n        }}>PREV</button>}\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map((p) => {\r\n                return <span className={cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }, styles.pageNumber)}\r\n                             key={p}\r\n                             onClick={() => {\r\n                                 onPageChanged(p);\r\n                             }}>{p}</span>\r\n            })}\r\n        {portionCount > portionNumber &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber + 1)\r\n        }}>NEXT</button>}\r\n    </div>\r\n}\r\nexport default Paginator;","import React from \"react\";\r\nimport userPhoto from '../../assets/images/user.png'\r\nimport styles from './Users.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nlet User = ({user, followingInProgress, ...props}: any) => {\r\n    console.log(user.followed)\r\n    return (\r\n        <div>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={'profile/' + user.id}>\r\n                        <img src={user.photos.small !== null ? user.photos.small : userPhoto}\r\n                             className={styles.userPhoto} alt=''/>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {user.followed\r\n                            ? <button\r\n                                disabled={followingInProgress.some((id: number) => id === user.id)} // если ИДшка равна user.id то тогда кнопка дизейблится\r\n                                onClick={() => {\r\n                                    props.unfollow(user.id)\r\n                                }}>Unfollow</button>\r\n                            : <button\r\n                                disabled={followingInProgress.some((id: number) => id === user.id)} // если ИДшка равна user.id то тогда кнопка дизейблится\r\n                                onClick={() => {\r\n                                    props.follow(user.id)\r\n                                }}>Follow</button>}\r\n                    </div>\r\n                </span>\r\n            <span>\r\n                    <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{\"user.location.country\"}</div>\r\n                        <div>{\"user.location.city\"}</div>\r\n                    </span>\r\n                </span>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default User","import React from \"react\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\n\r\n\r\nlet Users = ({currentPage, onPageChanged, pageSize, totalUsersCount, users, ...props}: any) => {\r\n\r\n    return <div>\r\n        <Paginator currentPage={currentPage}\r\n                   onPageChanged={onPageChanged}\r\n                   pageSize={pageSize}\r\n                   totalItemsCount={totalUsersCount}\r\n        />\r\n        {\r\n            users.map((u: any) => <User user={u} key={u.id}\r\n                                        followingInProgress={props.followingInProgress}\r\n                                        unfollow={props.unfollow}\r\n                                        follow={props.follow}\r\n\r\n            />)\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default Users","import {AppStateType} from \"./redux-store\";\r\nimport {createSelector} from 'reselect'\r\nimport {UsersType} from \"./users-reducer\";\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector, (users: UsersType[]) => {\r\n    return users.filter((u: UsersType) => true)\r\n})\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pagesize\r\n}\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    setCurrentPage,\r\n    follow,\r\n    unfollow, UsersPageType, toggleFollowingProgress, requestUsers,\r\n} from \"../../redux/users-reducer\";\r\nimport Users from \"./Users\";\r\nimport {Preloader} from \"../common/preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from \"../../redux/users-selectors\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n// type UsersContainerType = {\r\n//     toggleIsFetching: (arg0: boolean) => void\r\n//     setUsers: (items: any) => void\r\n//     setTotalUsersCount: (totalCount: number) => void\r\n//     setCurrentPage: (pageNumber: number) => void\r\n//     pageSize: number\r\n//     currentPage: number\r\n//     isFetching: boolean\r\n//     totalItemsCount: number\r\n//     users: Array<UsersType>\r\n//     follow: boolean\r\n//     unfollow: boolean\r\n// }\r\n\r\nclass UsersContainer extends React.Component<any, UsersPageType> { // первый пропсы && второй стейт\r\n    componentDidMount() {\r\n        const {currentPage, pageSize} = this.props\r\n        this.props.getUsers(currentPage, pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {pageSize} = this.props\r\n        this.props.getUsers(pageNumber, pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   onPageChanged={this.onPageChanged}\r\n                   users={this.props.users}\r\n                   follow={this.props.follow}\r\n                   unfollow={this.props.unfollow}\r\n                   toggleFollowingProgress={this.props.toggleFollowingProgress}\r\n                   followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\n\r\n// let mapStateToProps = (state: usersStatePageType) => {\r\n//     return {\r\n//         users: state.usersPage.users,\r\n//         pageSize: state.usersPage.pagesize,\r\n//         totalItemsCount: state.usersPage.totalItemsCount,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         followingInProgress: state.usersPage.followingInProgress\r\n//     }\r\n// }\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\nexport default compose<any>(\r\n    connect(mapStateToProps, {\r\n        follow, unfollow, setCurrentPage,\r\n        toggleFollowingProgress, getUsers: requestUsers\r\n    })\r\n)(UsersContainer)\r\n","import {getAuthUserData, SetAuthUserDataACTYPE} from \"./auth-reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS'\r\n\r\n\r\ntype InitializeSuccessACTYPE = ReturnType<typeof initializedSuccess>\r\ntype ActionType = InitializeSuccessACTYPE | SetAuthUserDataACTYPE\r\n\r\nexport type AppType = {\r\n    initialized: boolean\r\n}\r\n\r\nlet initialState: AppType = {\r\n    initialized: false,\r\n\r\n}\r\n\r\nconst appReducer = (state = initialState, action: ActionType): AppType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializedSuccess = () => ({\r\n    type: INITIALIZED_SUCCESS,\r\n} as const)\r\n\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess())\r\n        })\r\n}\r\nexport default appReducer;","\r\n\r\nexport type sidebarType = {}\r\n\r\nlet inititalState: sidebarType = {\r\n    sidebar: {}\r\n}\r\n\r\nconst sidebarReducer = (state = inititalState, action: any ): sidebarType => {\r\n\r\n    return state\r\n}\r\n\r\nexport default sidebarReducer;","import {applyMiddleware, combineReducers, createStore, compose} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet reducers = combineReducers(\r\n    {\r\n        profilePage: profileReducer,\r\n        dialogsPage: dialogsReducer,\r\n        sidebarPage: sidebarReducer,\r\n        usersPage: usersReducer,\r\n        auth: authReducer,\r\n        form: formReducer,\r\n        app: appReducer,\r\n    }\r\n)\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\nexport default store","import React, {Suspense} from \"react\"\r\nimport {Preloader} from \"../components/common/preloader/Preloader\";\r\n\r\nexport const WithSuspense = (Component: React.ComponentType) => {\r\n    return (props: any) => {\r\n        return <Suspense fallback={<Preloader/>}>\r\n            <Component {...props} />\r\n        </Suspense>\r\n    }\r\n}","import React from 'react';\r\nimport {BrowserRouter, HashRouter, Route, withRouter} from 'react-router-dom';\r\nimport './App.css';\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Login from './components/Login/Login';\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport store, {AppStateType} from \"./redux/redux-store\";\r\nimport {Preloader} from \"./components/common/preloader/Preloader\";\r\nimport {WithSuspense} from \"./HOC/WithSuspense\";\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\n\r\ntype AppType = {\r\n    initialized: boolean\r\n    initializeApp: () => boolean\r\n}\r\n\r\n\r\nclass App extends React.Component<AppType> {\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n    }\r\n\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n        return (\r\n            <div className={'app-wrapper'}>\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n\r\n                <div className={'app-wrapper-content'}>\r\n\r\n                    <Route path='/dialogs' render={WithSuspense(DialogsContainer)}/>\r\n                    <Route path='/profile/:userId?' render={WithSuspense(ProfileContainer)}/>\r\n                    <Route path='/users' render={() =>\r\n                        <UsersContainer/>}\r\n                    />\r\n                    <Route path='/login' render={() =>\r\n                        <Login/>}\r\n                    />\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\nconst AppContainer = compose<any>(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp}))\r\n(App);\r\n\r\nconst SamuraiJSApp = () => {\r\n    return <HashRouter>\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </HashRouter>\r\n}\r\n\r\nexport default SamuraiJSApp;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport SamuraiJSApp from \"./App\";\r\n\r\n\r\nReactDOM.render(\r\n    <SamuraiJSApp/>,\r\n    document.getElementById('root')\r\n);","import React from \"react\"\r\nimport s from \"./FormsControls.module.css\"\r\nimport {Field} from \"redux-form\";\r\n\r\nconst FormControl = ({meta: {touched, error}, children}: any) => {\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}><textarea {...input}{...restProps}/></FormControl>\r\n    )\r\n}\r\nexport const Input = (props: any) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}><input {...input}{...restProps}/></FormControl>\r\n    )\r\n}\r\n\r\n\r\n// type createFieldType = {\r\n//     placeholder: string,\r\n//     name: string,\r\n//     validators: Array<RequiredValidateType>,\r\n//     component: any,\r\n//     type: {\r\n//         type: string\r\n//     }\r\n// }\r\nexport const createField = (placeholder: any, name: any, validators: any, component: any, props = {}, text = '') => {\r\n    return <div>\r\n        <Field\r\n            {...props}\r\n            placeholder={placeholder}\r\n            name={name}\r\n            component={component}\r\n            validate={validators}\r\n        /> {text}\r\n    </div>\r\n}","import React from 'react';\r\nimport preloader from '../../../assets/images/preloader.svg'\r\nexport const Preloader = () => {\r\n    return <div>\r\n        <img src={preloader} alt=\"\"/>\r\n    </div>\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2PnCH\",\"error\":\"FormsControls_error__1k2Ld\",\"formSummaryError\":\"FormsControls_formSummaryError__12Zz5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__4Y2ZP\",\"pageNumber\":\"Paginator_pageNumber__1zjHb\",\"selectedPage\":\"Paginator_selectedPage__35ed7\"};","export type RequiredValidateType = (value: string) => string | undefined\r\n\r\nexport const required = (value: string): string | undefined => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value && value.length > 30) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2I21n\",\"loginBlock\":\"Header_loginBlock__VM9IS\"};","import {profileAPI, usersAPI} from \"../api/api\";\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst DELETE_POST = 'DELETE_POST';\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_STATUS = 'SET_STATUS';\r\n\r\nexport type ProfileRootType = {\r\n    profile: ProfileType | null\r\n}\r\n\r\nexport type ProfilePageType = {\r\n    posts: Array<PostsType>\r\n    profile: ProfileType | null\r\n    status: string\r\n}\r\nexport type PostsType = {\r\n    message: string,\r\n    id?: number,   // здесь для id необезательный тип указал\r\n    likesCount: string,\r\n}\r\nexport type ProfileType = {\r\n    aboutMe: string,\r\n    contacts?: ProfileContactType,\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: ProfilePhotosType\r\n}\r\n\r\nexport type ProfileContactType = {\r\n    facebook: string\r\n    website: null | string\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    youtube: null | string\r\n    github: string\r\n    mainLink: null | string\r\n}\r\nexport type ProfilePhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\n\r\nexport type ActionType = AddPostActionCreatorType |  // Типизация action\r\n    SetUserProfileACTYPE | setStatusType | deletePostActionCreatorType\r\n\r\nexport type AddPostActionCreatorType = {\r\n    type: typeof ADD_POST\r\n    newPostText: string\r\n}\r\n\r\nlet initialState: ProfilePageType = {\r\n    posts: [\r\n        {message: 'Hello, how are you doing', likesCount: '10', id: 1},\r\n        {message: 'Hay, nothing', likesCount: '25', id: 2},\r\n        {message: 'learn React, nigger!', likesCount: '1', id: 3},\r\n    ],\r\n    profile: null,\r\n    status: ''\r\n}\r\n\r\nconst profileReducer = (state = initialState, action: ActionType): ProfilePageType => {\r\n\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            let newPost = {\r\n                id: 4,\r\n                message: action.newPostText,\r\n                likesCount: '28'\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            }\r\n        case DELETE_POST:\r\n            return {\r\n                ...state, posts: state.posts.filter(p => p.id !== action.postId)\r\n            }\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const addPostActionCreator = (newPostText: string): AddPostActionCreatorType => ({type: ADD_POST, newPostText})\r\nexport const deletePost = (postId: number) => ({type: DELETE_POST, postId} as const)\r\nexport type SetUserProfileACTYPE = {\r\n    type: typeof SET_USER_PROFILE\r\n    profile: ProfileType\r\n}\r\n\r\nexport const setUserProfile = (profile: ProfileType): SetUserProfileACTYPE => ({type: SET_USER_PROFILE, profile})\r\nexport const setStatus = (status: string) => ({type: SET_STATUS, status}) as const\r\n\r\nexport type deletePostActionCreatorType = ReturnType<typeof deletePost>\r\nexport type setStatusType = ReturnType<typeof setStatus>\r\n\r\n\r\n// THUNK\r\nexport const getUserProfile = (userId: string) => async (dispatch: any) => {\r\n    let response = await usersAPI.getProfile(userId)\r\n    dispatch(setUserProfile(response.data))\r\n}\r\nexport const getStatus = (userId: string) => async (dispatch: any) => {\r\n    let response = await profileAPI.getStatus(userId)\r\n    dispatch(setStatus(response.data))\r\n}\r\nexport const updateStatus = (status: string) => async (dispatch: any) => {\r\n    let response = await profileAPI.updateStatus(status)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setStatus(status))\r\n    }\r\n}\r\n\r\nexport default profileReducer;"],"sourceRoot":""}